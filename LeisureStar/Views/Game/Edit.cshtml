@{
	ViewBag.Title = "Edit Game";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@section startupScript 
{
	@Html.Raw(ExoWeb.Model(
						new { game = ExoWeb.Query<Game>(ViewData["Id"] != null ? ViewData["Id"].ToString() : null,
													"this.Name",
													"this.Scores",
													"this.Teams",
													"this.Started",
													"this.Finished",
													"this.NumberOfTeamsPlaying",
													"this.NumberOfPlayersPerTeam",
													"this.Winner"),
						allteams = Team.All
					},
					(Game game) =>{}
			))

	<script type="text/javascript">
		function showMessage(message) {
			var messageBox = $('.message');
			messageBox.children('span').text(message);
			messageBox.fadeIn();
		}

		function save() {
			if ($('.validated-some').length > 0) {
				showMessage('There are unresolved validation errors. Please correct and try again.');
			}
			else {
				context.server.save(
					context.model.game,
					function success() {
						document.location.href = '@Url.Action("Index", "Game")';
					},
					function fail() {
						showMessage('An error occurred while saving.');
					});
			}
		}

		function addTeam(team) {
			if (!context.model.game.get_Teams().contains(team)) {
				context.model.game.get_Teams().add(team);

				//to get the allteams portion of the page to re-render
				//remove the element and readd it
				context.model.allteams.remove(team);
				context.model.allteams.add(team);
			}
		}

		function removeTeam(team) {
			context.model.game.get_Teams().remove(team);

			//to get the allteams portion of the page to re-render
			//remove the element and readd it
			context.model.allteams.remove(team);
			context.model.allteams.add(team);
		}

		//extend the Game type to add a changed event handler to the Teams list
		$exoweb({
			contextReady: function () {
				$extend('Game', function (type) {
					type.$Teams.addChanged(function(sender, args) {
						//when the team list changes see if a condition is raised
						//to provide a validation message to the user
						var validationError = false;

						//execute the rules for game because the conditions for teams will not be raised
						//until after this function handler, and thus the validation would be one off
						context.model.game.meta.executeRules(args.property);

						context.model.game.meta._conditions.forEach(function (item, index) {
							item._properties.forEach(function (propItem, propIndex) {
								if (propItem.get_name() === "Teams") {
									validationError = true;
								}
							});
						});

						if(validationError) {
							$('.teamsValidationMessage').addClass('validation-some');
							$('.teamsValidationMessage').html("The number of teams selected must equal the number of teams involved.");
						}
						else {
							$('.teamsValidationMessage').removeClass('validation-some');
							$('.teamsValidationMessage').html("");
						}
					});

					type.$NumberOfTeamsPlaying.addChanged(function (sender, args) {
						//when the team list changes see if a condition is raised
						//to provide a validation message to the user
						var validationError = false;

						//execute the rules for game because the conditions for teams will not be raised
						//until after this function handler, and thus the validation would be one off
						context.model.game.meta.executeRules(Game.$Teams);

						context.model.game.meta._conditions.forEach(function (item, index) {
							item._properties.forEach(function (propItem, propIndex) {
								if (propItem.get_name() === "Teams") {
									validationError = true;
								}
							});
						});

						if (validationError) {
							$('.teamsValidationMessage').addClass('validation-some');
							$('.teamsValidationMessage').html("The number of teams selected must equal the number of teams involved.");
						}
						else {
							$('.teamsValidationMessage').removeClass('validation-some');
							$('.teamsValidationMessage').html("");
						}
					});
				});
			}
		});
	</script>
}

<h2>Edit Game</h2>
<section>
	<div class="sys-template" sys:attach="dataview" dataview:data="{~ model.game, source=window.context}">
		<div class="fieldwithlabel"><span sys:attach="content" content:data="{@@ Name }"></span></div>
		<div class="fieldwithlabel"><span sys:attach="content" content:data="{@@ Started, label=Start Date }"></span></div>
		<div class="fieldwithlabel"><span sys:attach="content" content:data="{@@ NumberOfTeamsPlaying, label=Teams Involved }"></span></div>
		<div class="fieldwithlabel"><span sys:attach="content" content:data="{@@ NumberOfPlayersPerTeam, label=Players per Team }"></span></div>
		<p />

		<div sys:attach="toggle" toggle:on="{~ Teams }" toggle:when="{{ function(item){ return item.length > 0; } }}" toggle:action="show">
			<span style="font-weight: bold;">Current Teams:</span>
			<div class="sys-template" sys:attach="dataview" dataview:data="{~ Teams }">
				<span class="arrow-s" style="font-size:1em;" onclick="removeTeam($parentContextData(this));"></span>
				<div class="readonly" sys:style="display: inline;"><span sys:attach="content" content:data="{@@ Name }"></span></div>
				<br />
			</div>
		</div>
		<div class="teamsValidationMessage" class="validation"></div>

		<p />
		<span style="font-weight: bold;">Available Teams:</span>
		<div class="sys-template allTeams" sys:attach="dataview" dataview:data="{~ model.allteams, source=window.context, transform=where(function(item){ return !context.model.game.get_Teams().contains(item);  }) }">
			<span class="arrow-n" style="font-size:1em; margin-top:-0.4em;" onclick="addTeam($parentContextData(this));"></span>
			<div class="readonly" sys:style="display: inline;"><span sys:attach="content" content:data="{@@ Name }"></span></div>
			<br />
		</div>
	</div>
</section>

<p />
<div class="message">
<span style="font-weight: bold;"></span>
</div>
<p />
<a href="#" class="button" onclick="save()">Save</a>