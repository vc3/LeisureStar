@model Game

@ExoWeb.LoadTemplates("~/Scripts/ExoWeb/exoweb-templates.htm")

@ExoWeb.Model(new 
{ 
	game = Model.Include("this{Scores,Teams.Players,Winner}")
})

@ExoWeb.Render(
	@<section>
		<div class="sys-template" sys:attach="dataview" dataview:data="{~ model.game, source=window.context}">
			<div sys:attach="content" content:template="form" content:data="{@@ Name }"></div>
			<div sys:attach="content" content:template="form" content:data="{@@ NumberOfTeamsPlaying, label=Teams Involved }"></div>
			<div sys:attach="content" content:template="form" content:data="{@@ NumberOfPlayersPerTeam, label=Players per Team }"></div>
			<p />
			<div sys:attach="toggle" toggle:on="{~ Teams }" toggle:when="{{ function(item){ return item.length > 0; } }}" toggle:action="show">
				<span style="font-weight: bold;">Current Teams:</span>
				<div class="sys-template" sys:attach="dataview" dataview:data="{~ Teams }">
					<span class="arrow-s" style="font-size:1em;" onclick="removeTeam($parentContextData(this));"></span>
					<div class="readonly" style="display: inline;">{# TempDisplayName }</div>
					<br />
				</div>
			</div>
			<div class="teamsValidationMessage validation"></div>

			<p />
			<span style="font-weight: bold;">Available Teams:</span>
			<div class="sys-template allTeams" sys:attach="dataview" dataview:data="{~ model.allteams, source=window.context, transform=where(function(item){ return !context.model.game.get_Teams().contains(item);  }) }">
				<span class="arrow-n" style="font-size:1em; margin-top:-0.4em;" onclick="addTeam($parentContextData(this));"></span>
				<div class="readonly" style="display: inline;">{# TempDisplayName }</div>
				<br />
			</div>
		</div>
		<p />
		<div class="message">
		<span style="font-weight: bold;"></span>
		</div>
		<p />
		<a href="#" class="button" onclick="save()">Save</a>
	</section>
)

<script type="text/javascript">
	function showMessage(message) {
		var messageBox = $('.message');
		messageBox.children('span').text(message);
		messageBox.fadeIn();
	}

	function save() {
		if ($('.validated-some').length > 0) {
			showMessage('There are unresolved validation errors. Please correct and try again.');
		}
		else {
			context.server.save(
					context.model.game,
					function success() {
						document.location.href = '@Url.Action("Index", "Game")';
					},
					function fail() {
						showMessage('An error occurred while saving.');
					});
		}
	}

	function addTeam(team) {
		if (!context.model.game.get_Teams().contains(team)) {
			context.model.game.get_Teams().add(team);

			//to get the allteams portion of the page to re-render
			//remove the element and readd it
			context.model.allteams.remove(team);
			context.model.allteams.add(team);
		}
	}

	function removeTeam(team) {
		context.model.game.get_Teams().remove(team);

		//to get the allteams portion of the page to re-render
		//remove the element and readd it
		context.model.allteams.remove(team);
		context.model.allteams.add(team);
	}

	//extend the Game type to add a changed event handler to the Teams list
	$exoweb({
		contextReady: function () {
			$extend('Game', function (type) {

				//Add a client side rule to the game type for a condition that exists on the server
				//this is not a standard rule and thus requires a coresponding rule on the client to match
				//the server model.  The name of the rule on the client must match the rule name on server
				//Game.NumberOfMembersPerTeam is the condition type that is generated by the server, and can be seen in the JSON results of GetType for the Game model
				new ValidateNumberOfMembersPerTeam(type.meta, ExoWeb.Model.ConditionType.get("Game.NumberOfMembersPerTeam"));

				type.$Teams.addChanged(function (sender, args) {
					//when the team list changes see if a condition is raised
					//to provide a validation message to the user
					var validationError = false;

					//execute the rules for game because the conditions for teams will not be raised
					//until after this function handler, and thus the validation would be one off
					context.model.game.meta.executeRules(args.property);

					context.model.game.meta._conditions.forEach(function (item, index) {
						item._properties.forEach(function (propItem, propIndex) {
							if (propItem.get_name() === "Teams") {
								validationError = true;
							}
						});
					});

					if (validationError) {
						$('.teamsValidationMessage').addClass('validation-some');
						$('.teamsValidationMessage').html("The number of teams selected must equal the number of teams involved.");
					}
					else {
						$('.teamsValidationMessage').removeClass('validation-some');
						$('.teamsValidationMessage').html("");
					}
				});

				type.$NumberOfTeamsPlaying.addChanged(function (sender, args) {
					//when the team list changes see if a condition is raised
					//to provide a validation message to the user
					var validationError = false;

					//execute the rules for game because the conditions for teams will not be raised
					//until after this function handler, and thus the validation would be one off
					context.model.game.meta.executeRules(Game.$Teams);

					context.model.game.meta._conditions.forEach(function (item, index) {
						item._properties.forEach(function (propItem, propIndex) {
							if (propItem.get_name() === "Teams") {
								validationError = true;
							}
						});
					});

					if (validationError) {
						$('.teamsValidationMessage').addClass('validation-some');
						$('.teamsValidationMessage').html("The number of teams selected must equal the number of teams involved.");
					}
					else {
						$('.teamsValidationMessage').removeClass('validation-some');
						$('.teamsValidationMessage').html("");
					}
				});
			});

			$extend('Team', function (type) {
				type.meta.addProperty({
					name: 'TempDisplayName',
					type: String,
					isList: false
				})
					.calculated({
						fn: function () {
							return $format('{0} ({1} Players)', this.get_Name(), this.get_Players().length);
						},
						basedOn: ['this.Name', 'this.Players']
					});
			});
		}
	});

	//Adding a client side rule to match the rule we have defined in the Game model on the server
	//this is not a standard rule and thus requires a coresponding rule on the client to match
	//the server model.  The name of the rule on the client must match the rule name on server
	function ValidateNumberOfMembersPerTeam(mtype, ctype, callback, thisPtr) {
		this.prop = mtype.property("NumberOfPlayersPerTeam", true);
		this.teamList = mtype.property("Teams", true);

		if (!ctype) {
			ctype = Rule.ensureError("validateNumberOfMembersPerTeam", this.prop);
		}

		this.ctype = ctype;

		this.err = new ExoWeb.Model.Condition(ctype, "All teams must have the number of players equal to " + this.prop.get_label(), [this.prop, this.teamList], this);

		ExoWeb.Model.Rule.register(this, [this.prop, this.teamList], false, mtype, callback, thisPtr);
	}

	ValidateNumberOfMembersPerTeam.validateTeamCounts = function RequiredRule$hasValue(obj, prop) {
		if (!(obj instanceof Game))
			return true;  //no conditions will need to be raised if this object is not a game
		else {
			var retVal = true;
			//loop of each team verifying that each team has the correct number of players
			obj.get_Teams().forEach(function (item, index) {
				if (item.get_Players().length !== obj.get_NumberOfPlayersPerTeam())
					retVal = false;
			});

			return retVal;
		}
	};

	ValidateNumberOfMembersPerTeam.prototype = {
		execute: function (obj) {
			obj.meta.conditionIf(this.err, !ValidateNumberOfMembersPerTeam.validateTeamCounts(obj, this.prop));
		},
		toString: function () {
			return "All teams must have the same number of players as number of players per team";
		}
	};
</script>